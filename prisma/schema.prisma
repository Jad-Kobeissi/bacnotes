// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User { 
  id String @id @default(uuid())
  username String @unique
  password String 
  followers User[] @relation("followers")
  following User[] @relation("followers")
  posts Post[]
  grade String
  points Int
  rating Int
  banned Boolean @default(false)
  admin Boolean @default(false)
  reports Report[] @relation("report") 
  requests Request[] @relation("requests")
  responses Response[] 
  likedPosts Post[] @relation("likes")
  createdAt DateTime @default(now())
}
model Post {
  id String @id @default(uuid())
  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  title String
  description String
  subject String
  imageUrls String[]
  likes Int
  likedUsers User[] @relation("likes")
  approved Boolean @default(false)
  createdAt DateTime @default(now())
}
model Report {
  id String @id @default(uuid())
  user User @relation(name: "report",fields: [userId], references: [id])
  userId String @unique
}

model Request {
  id String @id @default(uuid())
  author User @relation("requests", fields: [authorId], references: [id])
  authorId String
  title String
  description String
  subject String
  responses Response[]
  createdAt DateTime @default(now())
}
model Response {
  id String @id @default(uuid())
  request Request @relation(references: [id], fields: [requestId])
  requestId String
  author User @relation(references: [id], fields: [authorId])
  authorId String
  title String
  description String
  imageUrls String[]
  createdAt DateTime @default(now())
}